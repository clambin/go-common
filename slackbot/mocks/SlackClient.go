// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"
)

// SlackClient is an autogenerated mock type for the SlackClient type
type SlackClient struct {
	mock.Mock
}

type SlackClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackClient) EXPECT() *SlackClient_Expecter {
	return &SlackClient_Expecter{mock: &_m.Mock}
}

// GetChannels provides a mock function with given fields:
func (_m *SlackClient) GetChannels() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChannels")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackClient_GetChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannels'
type SlackClient_GetChannels_Call struct {
	*mock.Call
}

// GetChannels is a helper method to define mock.On call
func (_e *SlackClient_Expecter) GetChannels() *SlackClient_GetChannels_Call {
	return &SlackClient_GetChannels_Call{Call: _e.mock.On("GetChannels")}
}

func (_c *SlackClient_GetChannels_Call) Run(run func()) *SlackClient_GetChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SlackClient_GetChannels_Call) Return(_a0 []string, _a1 error) *SlackClient_GetChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SlackClient_GetChannels_Call) RunAndReturn(run func() ([]string, error)) *SlackClient_GetChannels_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessage provides a mock function with given fields:
func (_m *SlackClient) GetMessage() chan *slack.MessageEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 chan *slack.MessageEvent
	if rf, ok := ret.Get(0).(func() chan *slack.MessageEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *slack.MessageEvent)
		}
	}

	return r0
}

// SlackClient_GetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessage'
type SlackClient_GetMessage_Call struct {
	*mock.Call
}

// GetMessage is a helper method to define mock.On call
func (_e *SlackClient_Expecter) GetMessage() *SlackClient_GetMessage_Call {
	return &SlackClient_GetMessage_Call{Call: _e.mock.On("GetMessage")}
}

func (_c *SlackClient_GetMessage_Call) Run(run func()) *SlackClient_GetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SlackClient_GetMessage_Call) Return(_a0 chan *slack.MessageEvent) *SlackClient_GetMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SlackClient_GetMessage_Call) RunAndReturn(run func() chan *slack.MessageEvent) *SlackClient_GetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserID provides a mock function with given fields:
func (_m *SlackClient) GetUserID() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackClient_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type SlackClient_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
func (_e *SlackClient_Expecter) GetUserID() *SlackClient_GetUserID_Call {
	return &SlackClient_GetUserID_Call{Call: _e.mock.On("GetUserID")}
}

func (_c *SlackClient_GetUserID_Call) Run(run func()) *SlackClient_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SlackClient_GetUserID_Call) Return(_a0 string, _a1 error) *SlackClient_GetUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SlackClient_GetUserID_Call) RunAndReturn(run func() (string, error)) *SlackClient_GetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: _a0
func (_m *SlackClient) Run(_a0 context.Context) {
	_m.Called(_a0)
}

// SlackClient_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type SlackClient_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SlackClient_Expecter) Run(_a0 interface{}) *SlackClient_Run_Call {
	return &SlackClient_Run_Call{Call: _e.mock.On("Run", _a0)}
}

func (_c *SlackClient_Run_Call) Run(run func(_a0 context.Context)) *SlackClient_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SlackClient_Run_Call) Return() *SlackClient_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *SlackClient_Run_Call) RunAndReturn(run func(context.Context)) *SlackClient_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: channelID, attachments
func (_m *SlackClient) Send(channelID string, attachments []slack.Attachment) error {
	ret := _m.Called(channelID, attachments)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []slack.Attachment) error); ok {
		r0 = rf(channelID, attachments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlackClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type SlackClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - channelID string
//   - attachments []slack.Attachment
func (_e *SlackClient_Expecter) Send(channelID interface{}, attachments interface{}) *SlackClient_Send_Call {
	return &SlackClient_Send_Call{Call: _e.mock.On("Send", channelID, attachments)}
}

func (_c *SlackClient_Send_Call) Run(run func(channelID string, attachments []slack.Attachment)) *SlackClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]slack.Attachment))
	})
	return _c
}

func (_c *SlackClient_Send_Call) Return(_a0 error) *SlackClient_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SlackClient_Send_Call) RunAndReturn(run func(string, []slack.Attachment) error) *SlackClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewSlackClient creates a new instance of SlackClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSlackClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SlackClient {
	mock := &SlackClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
