// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"
)

// SlackClient is an autogenerated mock type for the SlackClient type
type SlackClient struct {
	mock.Mock
}

// GetChannels provides a mock function with given fields:
func (_m *SlackClient) GetChannels() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessage provides a mock function with given fields:
func (_m *SlackClient) GetMessage() chan *slack.MessageEvent {
	ret := _m.Called()

	var r0 chan *slack.MessageEvent
	if rf, ok := ret.Get(0).(func() chan *slack.MessageEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *slack.MessageEvent)
		}
	}

	return r0
}

// GetUserID provides a mock function with given fields:
func (_m *SlackClient) GetUserID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Run provides a mock function with given fields: ctx
func (_m *SlackClient) Run(ctx context.Context) {
	_m.Called(ctx)
}

// Send provides a mock function with given fields: channel, attachments
func (_m *SlackClient) Send(channel string, attachments []slack.Attachment) error {
	ret := _m.Called(channel, attachments)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []slack.Attachment) error); ok {
		r0 = rf(channel, attachments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSlackClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSlackClient creates a new instance of SlackClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackClient(t mockConstructorTestingTNewSlackClient) *SlackClient {
	mock := &SlackClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
